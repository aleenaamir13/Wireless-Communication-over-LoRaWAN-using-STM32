/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include <stdio.h> // Required for printf
#include <stm32wlxx_hal_rcc.h>
#include <stm32wlxx_hal_uart.h>
#include "stm32wlxx_hal.h"

#define DHT11_Pin GPIO_PIN_1
#define DHT11_Port GPIOC

#define RED_LED_Pin GPIO_PIN_2
#define RED_LED_Port GPIOC
#define WHITE_LED_Pin GPIO_PIN_10
#define WHITE_LED_Port GPIOB



#define INFRARED_Pin GPIO_PIN_8
#define INFRARED_Port GPIOB/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */
#ifdef GNUC
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
void SystemClock_Config(void);
void GPIO_Init(void);
void DHT11_Read(uint8_t *temperature, uint8_t *humidity);
uint8_t Infrared_ReadDistance(void);
/* USER CODE END PTD */

COM_InitTypeDef BspCOMInit;
static void MX_GPIO_Init(void);

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
	 // Variables for sensor data
	    uint8_t temperature = 0, humidity = 0;
	    uint8_t distance = 0;

	    while (1) {
	        // Simulate reading DHT11 data
	        DHT11_Read(&temperature, &humidity);

	        // Simulate reading distance from infrared sensor
	        distance = Infrared_ReadDistance();

	        // Print data to console
	        printf("Temperature: %dÂ°C, Humidity: %d%%, Distance: %d cm\n", temperature, humidity, distance);

	        // Control LEDs based on sensor data
	        if (temperature > 20) {
	            HAL_GPIO_WritePin(RED_LED_Port, RED_LED_Pin, GPIO_PIN_SET);
	        } else {
	            HAL_GPIO_WritePin(RED_LED_Port, RED_LED_Pin, GPIO_PIN_RESET);
	        }

	        if (distance > 120) {
	            HAL_GPIO_WritePin(WHITE_LED_Port, WHITE_LED_Pin, GPIO_PIN_SET);
	        } else {
	            HAL_GPIO_WritePin(WHITE_LED_Port, WHITE_LED_Pin, GPIO_PIN_RESET);
	        }

	        HAL_Delay(1000); // Delay for 1 second
	    }
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
  BSP_LED_Init(LED_GREEN);
  BSP_LED_Init(LED_RED);

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
  BspCOMInit.StopBits   = COM_STOPBITS_1;
  BspCOMInit.Parity     = COM_PARITY_NONE;
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
  {
    Error_Handler();
  }

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);


  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
/* Dummy DHT11 Read Function */
// Infrared distance sensor reading function (assuming a simple high/low distance signal)
uint8_t Infrared_ReadDistance(void) {
    uint8_t distance = 0;
    uint32_t pulseWidth = 0;

    // Assuming the distance sensor is connected to INFRARED_PIN
    HAL_GPIO_WritePin(INFRARED_Port, INFRARED_Pin, GPIO_PIN_SET);  // Send trigger signal
    HAL_Delay(10);  // Wait for the sensor to settle

    // Measure the time it takes for the signal to return (pulse width)
    uint32_t startTime = HAL_GetTick();
    while (HAL_GPIO_ReadPin(INFRARED_Port, INFRARED_Pin) == GPIO_PIN_SET);  // Wait for the pin to go LOW

    pulseWidth = HAL_GetTick() - startTime;  // Measure pulse duration

    // Convert pulse width to distance (this depends on your specific sensor's characteristics)
    // Example: Assume pulse width is directly proportional to distance
    if (pulseWidth > 1000) {
        distance = 120;  // Return maximum distance (example: 120 cm)
    } else if (pulseWidth > 500) {
        distance = 60;   // Return distance based on pulse width
    } else {
        distance = 10;   // Return minimum distance (example: 10 cm)
    }

    return distance;
}


// DHT11 sensor reading function
void DHT11_Read(uint8_t *temperature, uint8_t *humidity) {
    uint8_t data[5] = {0};
    uint8_t bitIndex = 0;
    uint8_t byteIndex = 0;

    // GPIO configuration for DHT11 (assuming active low signal)
    HAL_GPIO_WritePin(DHT11_Port, DHT11_Pin, GPIO_PIN_RESET);  // Start signal
    HAL_Delay(20);  // Wait for at least 18ms
    //HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);    // Release line
    HAL_Delay(20);  // Wait for response from sensor

    // Read 40 bits of data (5 bytes)
    for (byteIndex = 0; byteIndex < 5; byteIndex++) {
        for (bitIndex = 7; bitIndex >= 0; bitIndex--) {
            while (HAL_GPIO_ReadPin(DHT11_Port, DHT11_Pin) == GPIO_PIN_RESET);  // Wait for the pin to go HIGH

            uint32_t startTime = HAL_GetTick();  // Start time
            while (HAL_GPIO_ReadPin(DHT11_Port, DHT11_Pin) == GPIO_PIN_SET);    // Wait for the pin to go LOW
            uint32_t pulseWidth = HAL_GetTick() - startTime;  // Measure the pulse width

            if (pulseWidth > 40) {
                data[byteIndex] |= (1 << bitIndex);  // Set bit if pulse is long (logical 1)
            }
        }
    }

    // Store the data into temperature and humidity variables
    *humidity = data[0];           // First byte is humidity
    *temperature = data[2];        // Third byte is temperature
}


#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */